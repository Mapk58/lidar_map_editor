import React, { useCallback, useMemo, useState } from "react";

import type { ChunkData, BboxData } from "../../../types/chunks";

import { ApiService } from "../../../services/api";
import styles from "../ControlPanel.module.css";

const DEFAULT_TEXT_VALUE = "04852fcf-2fbf-477a-ab78-5a6970614c96";

type UploadTabProps = {
  onProcessChunks: (chunks: ChunkData[]) => Promise<void>;
  isLoading: boolean;
  error: string | null;
  bboxManager?: {
    deletedBboxes: BboxData[];
  };
  lastJobId: string | null;
  setLastJobId: (jobId: string | null) => void;
};

export const UploadTab: React.FC<UploadTabProps> = ({
  onProcessChunks,
  isLoading,
  error,
  bboxManager,
  lastJobId,
  setLastJobId,
}) => {
  const [textInput, setTextInput] = useState<string>(DEFAULT_TEXT_VALUE);
  const [localError, setLocalError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isFileSubmitting, setIsFileSubmitting] = useState(false);

  const effectiveError = useMemo(
    () => localError || error,
    [localError, error],
  );

  const handleTextChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      setTextInput(event.target.value);
      setLocalError(null);
    },
    [],
  );

  const handleUpload = useCallback(async () => {
    const trimmed = textInput.trim();
    if (!trimmed) {
      setLocalError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π job_id");
      return;
    }

    setIsSubmitting(true);
    setLocalError(null);
    setLastJobId(trimmed);

    ApiService.getJobResults(trimmed)
      .then((response) => {
        if (!response.success || !response.data) {
          throw new Error(response.error || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
        }
        return onProcessChunks(response.data.results);
      })
      .then(() => {
        setTextInput("");
      })
      .catch((uploadError) => {
        const message =
          uploadError instanceof Error
            ? uploadError.message
            : "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
        setLocalError(message);
      })
      .finally(() => {
        setIsSubmitting(false);
      });
  }, [onProcessChunks, textInput, setLastJobId]);

  const isButtonDisabled = isLoading || isSubmitting;
  const isTextEmpty = !textInput.trim();
  const isAnySubmitting = isLoading || isSubmitting || isFileSubmitting;

  const handleFileChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const f = e.target.files?.[0] ?? null;
      setSelectedFile(f);
      setLocalError(null);
    },
    [],
  );

  const handleFileUpload = useCallback(() => {
    if (!selectedFile) {
      setLocalError("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .pcd");
      return;
    }
    setIsFileSubmitting(true);
    setLocalError(null);
    ApiService.processPcd(selectedFile)
      .then((response) => {
        if (!response.success || !response.data) {
          throw new Error(response.error || "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞");
        }
        setLastJobId(response.data.job_id);
        return onProcessChunks(response.data.results);
      })
      .then(() => {
        setSelectedFile(null);
      })
      .catch((err) => {
        const message = err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
        setLocalError(message);
      })
      .finally(() => setIsFileSubmitting(false));
  }, [onProcessChunks, selectedFile, setLastJobId]);

  const handleExportPcd = useCallback(async () => {
    console.log("=== –≠–∫—Å–ø–æ—Ä—Ç PCD ===");
    console.log("–¢–µ–∫—É—â–∏–π job_id:", lastJobId || "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω");

    if (!lastJobId) {
      setLocalError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ job_id –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
      return;
    }

    if (!bboxManager?.deletedBboxes || bboxManager.deletedBboxes.length === 0) {
      setLocalError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö bbox");
      return;
    }

    try {
      const request = {
        job_id: lastJobId,
        bounding_box: bboxManager.deletedBboxes.map(
          (bbox) => bbox.bounding_box,
        ),
      };

      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", request);
      console.log("–í—ã–∑–æ–≤ ApiService.exportPcd...");
      const response = await ApiService.exportPcd(request);
      console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", response);

      if (response.success && response.data?.download_url) {
        console.log("–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...");

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ URL:", response.data.download_url);
        const blob = await ApiService.downloadPcd(response.data.download_url);
        console.log("–ü–æ–ª—É—á–µ–Ω blob —Ñ–∞–π–ª–∞, —Ä–∞–∑–º–µ—Ä:", blob.size, "–±–∞–π—Ç");

        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = `exported_${lastJobId}.pcd`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");
      } else {
        console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", response.error);
        setLocalError(response.error || "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
      const message =
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞";
      setLocalError(message);
    }
  }, [bboxManager?.deletedBboxes, lastJobId]);

  return (
    <div>
      <div className={styles.uploadGroup}>
        <h3 className={styles.tabTitle}>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞</h3>
        <div className={styles.inputGroup}>
          <input
            type="file"
            accept=".pcd"
            onChange={handleFileChange}
            className={styles.textInput}
            aria-label="PCD —Ñ–∞–π–ª"
          />
          <button
            onClick={handleFileUpload}
            disabled={isAnySubmitting || !selectedFile}
            className={`${styles.uploadButton} ${
              isAnySubmitting || !selectedFile
                ? styles.uploadButtonDisabled
                : ""
            }`}
            title={isAnySubmitting ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"}
            type="button"
          >
            {isAnySubmitting ? "‚è≥" : "‚¨ÜÔ∏è"}
          </button>
        </div>
      </div>
      <div className={styles.uploadGroup}>
        <h3 className={styles.tabTitle}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞ –ø–æ job_id
        </h3>

        <div className={styles.inputGroup}>
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ job_id..."
            value={textInput}
            onChange={handleTextChange}
            className={styles.textInput}
            aria-label="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏"
          />
          <button
            onClick={handleUpload}
            disabled={isAnySubmitting || isTextEmpty}
            className={`${styles.uploadButton} ${
              isAnySubmitting || isTextEmpty ? styles.uploadButtonDisabled : ""
            }`}
            title={isAnySubmitting ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–≥—Ä—É–∑–∏—Ç—å"}
            type="button"
          >
            {isAnySubmitting ? "‚è≥" : "‚¨ÜÔ∏è"}
          </button>
        </div>

        {textInput.trim() && !isButtonDisabled && (
          <div className={styles.inputInfo}>ID –∑–∞–¥–∞—á–∏: {textInput}</div>
        )}

        {(isLoading || isSubmitting || isFileSubmitting) && (
          <div className={styles.loadingInfo}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
          </div>
        )}

        {effectiveError && (
          <div className={styles.errorInfo}>–û—à–∏–±–∫–∞: {effectiveError}</div>
        )}
      </div>

      <div className={styles.uploadGroup}>
        <h3 className={styles.tabTitle}>–≠–∫—Å–ø–æ—Ä—Ç –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫</h3>
        <button
          onClick={handleExportPcd}
          className={styles.exportButton}
          type="button"
        >
          üì• –≠–∫—Å–ø–æ—Ä—Ç PCD
        </button>
      </div>
    </div>
  );
};
